/* // * 1.0.0 Продумаем алгоритм: 
  1) Т.к. у нас тут много одинаковых элементов, то разумно будет воспользоваться делегированием — повесить обработчик события на всю область, которая содержит эти элементы; 
  2) Далее нам понадобится создать модальное окно, которое будет показывать картинку с тёмной полупрозрачной подложкой;
  3) Сделать это можно воспользовавшись классом "popup", который уже есть в CSS и отвечает за модальные окна;
  4) Также мы создадим элемент IMG, который мы поместим в модальное окно и поменяем ему атрибут "src", чтобы картинка ссылалась на то, что нам нужно;
  5) Добавим, знакомый по другим модальным окнам, функционал, чтобы при клике на подложку модальное окно закрывалось.
*/
// 1.1.0 Сперва понадобится создавать блок, куда мы будем это всё помещать и для него отдельную переменную popup.
// 1.1.1 Получаем общий блок для всех изображений workSection.
// 1.1.2 Также необходимо создать изображение bigImg
// 1.2.0 Чтобы popup выглядел нормально добавим созданному div'у класс "popup".
// 1.2.1 При помощи метода appendChild добавим его в общую секцию workSection на странице.
// 1.2.2 Ну и в это же модальное окно хотелось бы поместить также и <img>, которое создали.
// 1.2.3 Чтобы изображение центрировалось в модальном окне добавим специально подготовленный класс "flex-centered".
// 1.3.0 Повесим обработчик события на всю рабочую секцию. Не забываем про объект события, раз мы пользуемся делегированием.
// 1.3.1 Отменим стандартное поведение ссылок и запишем event.target в переменную target для удобства и лаконичности кода.
// 1.3.2 Далее идёт классическое условие: проверка на наличие у элемента события "click" и проверка методом contains(), что у элемента есть класс "preview". И если условие выполняется, то мы покажем модальное окно.
// 1.3.3 Далее мы должны показать именно ту картинку, на которую кликнул пользователь. Сперва получим в переменную path путь к большому изображению. Запишем evt.target.parentNode, таким образом обратимся к родителю, т.к. именно родительская ссылка содержит в себе путь к большому изображению, как мы увидели из вёрстки. И методом getAttribute('href') получаем искомую ссылку.
// 1.3.4 Ну, а теперь мы можем использовать эту ссылку для отображения нашего bigImg, передав ему путь из path.
// 1.4.0 Также нам нужно добавить функционал, чтобы модальное окно закрывалось при клике на подложку. Для этого напишем условие, что событие вообще существует, а также проверим, что пользователь кликнул не в изображение, а в именно сам popup, который появился. В этом пригодится метод matches(). В него аргументом передаём строку селектор, по которому будем искать совпадение (div с классом 'popup'). Так мы удостоверимся, что пользователь кликнул на подложку.
const imgPopup = () => {
  const popup = document.createElement('div'),
    workSection = document.querySelector('.works'),
    bigImg = document.createElement('img');

  popup.classList.add('popup');
  workSection.appendChild(popup);

  popup.classList.add('flex-centered');
  popup.style.display = 'none';
  popup.appendChild(bigImg);

  workSection.addEventListener('click', (evt) => {
    evt.preventDefault();

    let target = evt.target;

    if (target && target.classList.contains('preview')) {
      popup.style.display = 'flex';
      popup.classList.add('faded-fast');
      const path = target.parentNode.getAttribute('href');
      bigImg.setAttribute('src', path);
    }

    if (target && target.matches('div.popup')) {
      popup.style.display = 'none';
    }
  });
};

export default imgPopup;